syntax = "proto3";

import "google/protobuf/empty.proto";
import "types/types.proto";

option go_package = "./downloader;downloaderproto";

package downloader;

service Downloader {
  // Erigon "download once" - means restart/upgrade/downgrade will not download files (and will be fast)
  // After "download once" - Erigon will produce and seed new files
  // Downloader will able: seed new files (already existing on FS), download uncomplete parts of existing files (if Verify found some bad parts)
  rpc ProhibitNewDownloads (ProhibitNewDownloadsRequest) returns (google.protobuf.Empty) {}

  // Adding new file to downloader: non-existing files it will download, existing - seed
  rpc Add (AddRequest) returns (google.protobuf.Empty) {}
  rpc Delete (DeleteRequest) returns (google.protobuf.Empty) {}

  // Trigger verification of files
  // If some part of file is bad - such part will be re-downloaded (without returning error)
  rpc Verify (VerifyRequest) returns (google.protobuf.Empty) {}

  // Set log prefix for downloader
  rpc SetLogPrefix (SetLogPrefixRequest) returns (google.protobuf.Empty) {}

  // Get is download completed
  rpc Completed (CompletedRequest) returns (CompletedReply) {}

  rpc TorrentCompleted(TorrentCompletedRequest) returns (stream TorrentCompletedReply);
}

// DownloadItem:
// - if Erigon created new snapshot and want seed it
// - if Erigon wnat download files - it fills only "torrent_hash" field
message AddItem {
  string path = 1;
  types.H160 torrent_hash = 2; // will be resolved as magnet link
}
message AddRequest {
  repeated AddItem items = 1; // single hash will be resolved as magnet link
}

// DeleteRequest: stop seeding, delete file, delete .torrent
message DeleteRequest {
  repeated string paths = 1;
}

message VerifyRequest {
}

message ProhibitNewDownloadsRequest {
  string type = 1;
}

// SetLogPrefixRequest: set downloader log prefix
message SetLogPrefixRequest {
  string prefix = 1;
}

message CompletedRequest {
}

// CompletedReply: return true if download is completed
message CompletedReply {
  bool completed = 1;
}

message TorrentCompletedRequest {
}

// Message: downloaded file data
message TorrentCompletedReply {
  string name = 1;
  types.H160 hash = 2;
}