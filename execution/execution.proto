syntax = "proto3";

package execution;

import "google/protobuf/empty.proto";
import "types/types.proto";

option go_package = "./execution;execution";

enum ValidationStatus {
    Success = 0;
    BadBlock = 1;
    TooFarAway = 2;
    MissingSegment = 3;
    Busy = 5; 
}

message ForkChoiceReceipt {
    ValidationStatus status = 1;
    types.H256 latest_valid_hash = 2; // Return latest valid hash in case of halt of execution.
}

// Result we receive after validation
message ValidationReceipt {
    ValidationStatus validation_status = 1;
    types.H256 latest_valid_hash = 2;
    optional types.H256 missing_hash = 3; // The missing hash, in case we receive MissingSegment so that we can reverse download it.
};

message IsCanonicalResponse {
    bool canonical = 1; // Whether hash is canonical or not.
}

// Header is a header for execution
message Header {
  types.H256 parent_hash = 1;
  types.H160 coinbase = 2;
  types.H256 state_root = 3;
  types.H256 receipt_root = 4;
  types.H2048 logs_bloom = 5;
  types.H256 prev_randao = 6;
  uint64 block_number = 7;
  uint64 gas_limit = 8;
  uint64 gas_used = 9;
  uint64 timestamp = 10;
  uint64 nonce = 11;
  bytes extra_data = 12;
  types.H256 difficulty = 13;
  types.H256 block_hash = 14; // We keep this so that we can validate it
  types.H256 ommer_hash = 15;
  types.H256 transaction_hash = 16;
  optional types.H256 base_fee_per_gas = 17;
  optional types.H256 withdrawal_hash = 18;
  optional uint64 blob_gas_used = 19;
  optional uint64 excess_blob_gas = 20;
}

// Body is a block body for execution
message BlockBody {
  types.H256 block_hash = 1;
  uint64 block_number = 2;
  // Raw transactions in byte format.
  repeated bytes transactions = 3;
  repeated Header uncles = 4;
  repeated types.Withdrawal withdrawals = 5;
}

message GetHeaderResponse {
    optional Header header = 1;
}

message GetTDResponse {
    optional types.H256 td = 1;
}

message GetBodyResponse {
    optional BlockBody body = 1;
}

message GetHeaderHashNumberResponse {
    optional uint64 block_number = 1; // null if not found.
}

message GetSegmentRequest {
    // Get headers/body by number or hash, invalid if none set.
    optional uint64 block_number = 1;
    optional types.H256 block_hash = 2;
}

message InsertHeadersRequest {
    repeated Header headers = 1;
}

message InsertBodiesRequest {
    repeated BlockBody bodies = 1;
}

message ForkChoice {
    types.H256 head_block_hash = 1;
    uint64 timeout = 2; // Timeout in milliseconds for fcu before it becomes async.
    optional types.H256 finalized_block_hash = 3;
    optional types.H256 safe_block_hash = 4;
}

message InsertionResult {
    ValidationStatus result = 1;
}

message ValidationRequest {
    types.H256 hash = 1;
    uint64 number = 2;
}

message AssembleBlockRequest {
	types.H256 parentHash = 1;
    uint64 timestamp = 2;
    types.H256 mixDigest = 3;
    types.H160 suggestedFeeRecipent = 4;
    repeated types.Withdrawal withdrawals = 5;
}

message AssembleBlockResponse {
    uint64 id = 1;
    bool busy = 2;
}

message GetAssembledBlockRequest {
    uint64 id = 1;
}

message AssembledBlockData {
    types.ExecutionPayload execution_payload = 1;
    types.H256 block_value = 2;
    types.BlobsBundleV1 blobs_bundle = 3;
}

message GetAssembledBlockResponse {
    optional AssembledBlockData data = 1;
    bool busy = 2;
}

service Execution {
    // Chain Putters.
    rpc InsertHeaders(InsertHeadersRequest) returns(InsertionResult);
    rpc InsertBodies(InsertBodiesRequest) returns(InsertionResult);
    // Chain Validation and ForkChoice.
    rpc ValidateChain(ValidationRequest) returns(ValidationReceipt);
    rpc UpdateForkChoice(ForkChoice) returns(ForkChoiceReceipt);
    // Block Assembly
    // EAGAIN design here, AssembleBlock initiates the asynchronous request, and GetAssembleBlock just return it if ready.
    rpc AssembleBlock(AssembleBlockRequest) returns(AssembleBlockResponse); 
    rpc GetAssembledBlock(GetAssembledBlockRequest) returns(GetAssembledBlockResponse);
    // Chain Getters.
    rpc CurrentHeader(google.protobuf.Empty) returns(GetHeaderResponse);
    rpc GetTD(GetSegmentRequest) returns(GetTDResponse);
    rpc GetHeader(GetSegmentRequest) returns(GetHeaderResponse);
    rpc GetBody(GetSegmentRequest) returns(GetBodyResponse);
    rpc IsCanonicalHash(types.H256) returns(IsCanonicalResponse);
    rpc GetHeaderHashNumber(types.H256) returns(GetHeaderHashNumberResponse);
    rpc GetForkChoice(google.protobuf.Empty) returns(ForkChoice);
}

  