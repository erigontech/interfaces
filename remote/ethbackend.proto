syntax = "proto3";

import "google/protobuf/empty.proto";
import "types/types.proto";

package remote;

option go_package = "./remote;remote";

service ETHBACKEND {
  rpc Etherbase(EtherbaseRequest) returns (EtherbaseReply);

  rpc NetVersion(NetVersionRequest) returns (NetVersionReply);
  
  rpc NetPeerCount(NetPeerCountRequest) returns (NetPeerCountReply);
  
  // Version returns the service version number
  rpc Version(google.protobuf.Empty) returns (types.VersionReply);

  // ProtocolVersion returns the Ethereum protocol version number (e.g. 66 for ETH66).
  rpc ProtocolVersion(ProtocolVersionRequest) returns (ProtocolVersionReply);

  // ClientVersion returns the Ethereum client version string using node name convention (e.g. TurboGeth/v2021.03.2-alpha/Linux).
  rpc ClientVersion(ClientVersionRequest) returns (ClientVersionReply);

  rpc Subscribe(SubscribeRequest) returns (stream SubscribeReply);

  // Only one subscription is needed to serve all the users, LogsFilterRequest allows to dynamically modifying the subscription
  rpc SubscribeLogs(stream LogsFilterRequest) returns (stream SubscribeLogsReply);

  // NodeInfo collects and returns NodeInfo from all running celery instances.
  rpc NodeInfo(NodesInfoRequest) returns(NodesInfoReply);
}

enum Event {
  HEADER = 0;
  PENDING_LOGS = 1;
  PENDING_BLOCK = 2;
}

message EtherbaseRequest {}

message EtherbaseReply { types.H160 address = 1; }

message NetVersionRequest {}

message NetVersionReply { uint64 id = 1; }

message NetPeerCountRequest {}

message NetPeerCountReply { uint64 count = 1; }

message ProtocolVersionRequest {}

message ProtocolVersionReply { uint64 id = 1; }

message ClientVersionRequest {}

message ClientVersionReply { string nodeName = 1; }

message SubscribeRequest {
  Event type = 1;
}

message SubscribeReply {
  Event type = 1;
  bytes data = 2;  //  serialized data
}

message LogsFilterRequest {
  bool allAddresses = 1;
  repeated types.H160 addresses = 2;
  bool allTopics = 3;
  repeated types.H256 topics = 4;
}

message SubscribeLogsReply {
  types.H160 address = 1;
  types.H256 blockHash = 2;
  uint64 blockNumber = 3;
  bytes data = 4;
  uint64 logIndex = 5;
  repeated types.H256 topics = 6;
  types.H256 transactionHash = 7;
  uint64 transactionIndex = 8;
  bool removed = 9;
}

message NodesInfoRequest {
  uint32 limit = 1;
}

message NodesInfoReply {
  repeated types.NodeInfoReply nodesInfo = 1;
}
