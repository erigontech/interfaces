syntax = "proto3";

import "google/protobuf/empty.proto";
import "types/types.proto";

package remote;

option go_package = "./remote;remoteproto";

service ETHBACKEND {
  rpc Etherbase(EtherbaseRequest) returns (EtherbaseReply);

  rpc NetVersion(NetVersionRequest) returns (NetVersionReply);

  rpc NetPeerCount(NetPeerCountRequest) returns (NetPeerCountReply);

  // Version returns the service version number
  rpc Version(google.protobuf.Empty) returns (types.VersionReply);

  // ProtocolVersion returns the Ethereum protocol version number (e.g. 66 for ETH66).
  rpc ProtocolVersion(ProtocolVersionRequest) returns (ProtocolVersionReply);

  // ClientVersion returns the Ethereum client version string using node name convention (e.g. TurboGeth/v2021.03.2-alpha/Linux).
  rpc ClientVersion(ClientVersionRequest) returns (ClientVersionReply);

  rpc Subscribe(SubscribeRequest) returns (stream SubscribeReply);

  // Only one subscription is needed to serve all the users, LogsFilterRequest allows to dynamically modifying the subscription
  rpc SubscribeLogs(stream LogsFilterRequest) returns (stream SubscribeLogsReply);

  // High-level method - can read block from db, snapshots or apply any other logic
  // it doesn't provide consistency
  // Request fields are optional - it's ok to request block only by hash or only by number
  rpc Block(BlockRequest) returns (BlockReply);

  // High-level method - can read block body (only storage metadata) from db, snapshots or apply any other logic
  rpc CanonicalBodyForStorage(CanonicalBodyForStorageRequest) returns (CanonicalBodyForStorageReply);

  // High-level method - can find block hash by block number
  rpc CanonicalHash(CanonicalHashRequest) returns (CanonicalHashReply);

  // High-level method - can find block number by block hash
  rpc HeaderNumber(HeaderNumberRequest) returns (HeaderNumberReply);

  // High-level method - can find block number by txn hash
  // it doesn't provide consistency
  rpc TxnLookup(TxnLookupRequest) returns (TxnLookupReply);

  // NodeInfo collects and returns NodeInfo from all running sentry instances.
  rpc NodeInfo(NodesInfoRequest) returns (NodesInfoReply);

  // Peers collects and returns peers information from all running sentry instances.
  rpc Peers(google.protobuf.Empty) returns (PeersReply);

  rpc AddPeer(AddPeerRequest) returns (AddPeerReply);

  // PendingBlock returns latest built block.
  rpc PendingBlock(google.protobuf.Empty) returns (PendingBlockReply);

  rpc BorEvent(BorEventRequest) returns (BorEventReply);
}

enum Event {
  HEADER = 0;
  PENDING_LOGS = 1;
  PENDING_BLOCK = 2;
  // NEW_SNAPSHOT - one or many new snapshots (of snapshot sync) were created,
  // client need to close old file descriptors and open new (on new segments),
  // then server can remove old files
  NEW_SNAPSHOT = 3;
}


message EtherbaseRequest {}

message EtherbaseReply { types.H160 address = 1; }

message NetVersionRequest {}

message NetVersionReply { uint64 id = 1; }

message NetPeerCountRequest {}

message NetPeerCountReply { uint64 count = 1; }

message ProtocolVersionRequest {}

message ProtocolVersionReply { uint64 id = 1; }

message ClientVersionRequest {}

message ClientVersionReply { string node_name = 1; }

message CanonicalHashRequest {
  uint64 block_number = 1;
}

message CanonicalHashReply {
  types.H256 hash = 1;
}

message HeaderNumberRequest {
  types.H256 hash = 1;
}

message HeaderNumberReply {
  optional uint64 number = 1;
}

message CanonicalBodyForStorageRequest {
  uint64 blockNumber = 1;
}

message CanonicalBodyForStorageReply {
  bytes body = 1;
}

message SubscribeRequest {
  Event type = 1;
}

message SubscribeReply {
  Event type = 1;
  bytes data = 2;  //  serialized data
}

message LogsFilterRequest {
  bool all_addresses = 1;
  repeated types.H160 addresses = 2;
  bool all_topics = 3;
  repeated types.H256 topics = 4;
}

message SubscribeLogsReply {
  types.H160 address = 1;
  types.H256 block_hash = 2;
  uint64 block_number = 3;
  bytes data = 4;
  uint64 log_index = 5;
  repeated types.H256 topics = 6;
  types.H256 transaction_hash = 7;
  uint64 transaction_index = 8;
  bool removed = 9;
}

message BlockRequest {
  uint64 block_height = 2;
  types.H256 block_hash = 3;
}

message BlockReply {
  bytes block_rlp = 1;
  bytes senders = 2;
}

message TxnLookupRequest {
  types.H256 txn_hash = 1;
}

message TxnLookupReply {
  uint64 block_number = 1;
}

message NodesInfoRequest {
  uint32 limit = 1;
}

message AddPeerRequest {
  string url = 1;
}

message NodesInfoReply {
  repeated types.NodeInfoReply nodes_info = 1;
}

message PeersReply {
  repeated types.PeerInfo peers = 1;
}

message AddPeerReply {
  bool success = 1;
}

message PendingBlockReply {
  bytes block_rlp = 1;
}

message EngineGetPayloadBodiesByHashV1Request {
  repeated types.H256 hashes = 1;
}

message EngineGetPayloadBodiesByRangeV1Request {
  uint64 start = 1;
  uint64 count = 2;
} 

message BorEventRequest {
  types.H256 bor_tx_hash = 1;
}

message BorEventReply {
  bool present = 1;
  uint64 block_number = 2;
  repeated bytes event_rlps = 3;
}
