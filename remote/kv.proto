syntax = "proto3";

import "google/protobuf/empty.proto";
import "types/types.proto";

package remote;

option go_package = "./remote;remote";

// Provides methods to access key-value data
service KV {
  // Version returns the service version number
  rpc Version(google.protobuf.Empty) returns (types.VersionReply);

  // Tx exposes read-only transactions for the key-value store
  //
  // When tx open, client must receive 1 message from server with txID
  // When cursor open, client must receive 1 message from server with cursorID
  // Then only client can initiate messages from server
  rpc Tx(stream Cursor) returns (stream Pair);

  rpc StateChanges(StateChangeRequest) returns (stream StateChangeBatch);
}

enum Op {
  OP_FIRST = 0;
  OP_FIRST_DUP = 1;
  OP_SEEK = 2;
  OP_SEEK_BOTH = 3;
  OP_CURRENT = 4;
  OP_LAST = 6;
  OP_LAST_DUP = 7;
  OP_NEXT = 8;
  OP_NEXT_DUP = 9;
  OP_NEXT_NO_DUP = 11;
  OP_PREV = 12;
  OP_PREV_DUP = 13;
  OP_PREV_NO_DUP = 14;
  OP_SEEK_EXACT = 15;
  OP_SEEK_BOTH_EXACT = 16;

  OP_OPEN = 30;
  OP_CLOSE = 31;
}

message Cursor {
  Op op = 1;
  string bucketName = 2;
  uint32 cursor = 3;
  bytes k = 4;
  bytes v = 5;
}

message Pair {
  bytes k = 1;
  bytes v = 2;
  uint32 cursorID = 3; // send once after new cursor open
  uint64 txID = 4;    // send once after tx open
}

enum Action {
  ACTION_STORAGE = 0;     // Change only in the storage
  ACTION_UPSERT = 1;      // Change of balance or nonce (and optionally storage)
  ACTION_CODE = 2;        // Change of code (and optionally storage)
  ACTION_UPSERT_CODE = 3; // Change in (balance or nonce) and code (and optinally storage)
  ACTION_DELETE = 4;      // Account is deleted
}

message StorageChange {
  types.H256 location = 1;
  bytes data = 2;
}

message AccountChange {
  types.H160 address = 1;
  uint64 incarnation = 2;
  Action action = 3;
  bytes data = 4; // nil if there is no UPSERT in action
  bytes code = 5; // nil if there is no CODE in action
  repeated StorageChange storageChanges = 6;
}

enum Direction {
  DIRECTION_FORWARD = 0;
  DIRECTION_UNWIND = 1;
}

// StateChangeBatch - list of StateDiff done in one DB transaction
message StateChangeBatch {
  uint64 databaseViewID = 1; // mdbx's tx.ID() - id of write transaction in db - where this changes happened
  repeated StateChange changeBatch = 2;
  uint64 pendingBlockBaseFee = 3; // BaseFee of the next block to be produced
  uint64 blockGasLimit = 4; // GasLimit of the latest block - proxy for the gas limit of the next block to be produced
}

// StateChange - changes done by 1 block or by 1 unwind
message StateChange {
  Direction direction = 1;
  uint64 blockHeight = 2;
  types.H256 blockHash = 3;
  repeated AccountChange changes = 4;
  repeated bytes txs = 5;     // enable by withTransactions=true
}

message StateChangeRequest {
  bool withStorage = 1;
  bool withTransactions = 2;
}
